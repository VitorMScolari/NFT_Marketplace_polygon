{"version":3,"sources":["components/ui/Notifications.js","contracts/rinkeby/NftMarketplace.js","contracts/rinkeby/NFT.js","utils/minter.js","hooks/useContract.js","components/create/Create.js","hooks/connectors.js","components/navbar/Navigation.jsx","utils/index.js","components/ui/Identicon.js","components/nfts/Card.js","components/ui/Loader.js","components/explore/Explore.js","components/profile/Profile.js","App.js","reportWebVitals.js","index.js"],"names":["NotificationSuccess","text","className","NotificationError","DefaultProps","defaultProps","marketAbi","nftAbi","client","ipfsHttpClient","createNft","minterContract","marketContract","price","name","description","exteralUrl","ipfsImage","ownerAddress","data","JSON","stringify","image","owner","add","added","url","path","fetchNftOwner","owner2","console","log","listItem","nftAddress","safeMint","getNfts","all_nfts","lastNftMinted","filter","e","toLowerCase","length","tokenId","index","createMarketItem","uploadToIpfs","file","target","files","progress","prog","nfts","totalSupply","nftsLength","i","nft","Promise","resolve","tokenURI","res","fetchNftMeta","meta","push","Number","all","ipfsUrl","axios","get","ownerOf","setApprovalForAll","marketAddress","getContract","library","account","contractAddress","contractAbi","signer","getSigner","connectUnchecked","Contract","AddNfts","useState","setDescription","setExteralUrl","setIpfsImage","setName","show","setShow","setPrice","navigate","useNavigate","web3reactContext","useWeb3React","handleClose","addNft","alert","toast","error","Button","onClick","variant","Modal","onHide","centered","Header","closeButton","Title","Body","Form","onSubmit","preventDefault","FloatingLabel","controlId","label","Control","type","placeholder","onChange","value","as","style","height","imageUrl","listingPrice","ethers","utils","parseEther","toString","getPrice","Footer","disabled","require","config","RPC_URLS","process","INFURA_ID","ALCHEMY_URL","injected","InjectedConnector","supportedChainIds","WalletConnectConnector","rpc","qrcode","pollingInterval","WalletLinkConnector","appName","Navigation","connect","activate","to","Create","deactivate","ex","truncateAddress","address","slice","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","width","NftCard","relistNft","methods","relistItem","itemId","send","from","buyNft","id","kit","defaultAccount","nftMarketPrice","_totalPrice","parseUnits","purchaseItem","remove","Col","xs","sm","lg","xl","Card","Stack","direction","gap","seller","Badge","bg","src","alt","Text","relist","priceFormatted","Loader","Spinner","animation","role","Explore","setNfts","loading","setLoading","getAssets","useCallback","getListing","map","marketItem","call","formatUnits","externalUrl","items","RingLoader","color","Row","_nft","Profile","userNfts","App","basename","exact","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","window","onload","localStorage","clear","ReactDOM","render","StrictMode","getLibrary","provider","Web3Provider","document","getElementById"],"mappings":"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","file":"static/js/main.ce71da72.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nconst Notification = () => (\r\n  <ToastContainer\r\n    position=\"bottom-center\"\r\n    autoClose={5000}\r\n    hideProgressBar\r\n    newestOnTop\r\n    closeOnClick\r\n    rtl={false}\r\n    pauseOnFocusLoss\r\n    draggable={false}\r\n    pauseOnHover\r\n  />\r\n);\r\n\r\nconst NotificationSuccess = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst NotificationError = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst Props = {\r\n  text: PropTypes.string,\r\n};\r\n\r\nconst DefaultProps = {\r\n  text: \"\",\r\n};\r\n\r\nNotificationSuccess.propTypes = Props;\r\nNotificationSuccess.defaultProps = DefaultProps;\r\n\r\nNotificationError.propTypes = Props;\r\nNotificationError.defaultProps = DefaultProps;\r\n\r\nexport { Notification, NotificationSuccess, NotificationError };\r\n","export const marketAbi = {\r\n  \"_format\": \"hh-sol-artifact-1\",\r\n  \"contractName\": \"NftMarketplace\",\r\n  \"sourceName\": \"contracts/NftMarketplace.sol\",\r\n  \"abi\": [\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"nftAddress\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"AlreadyListed\",\r\n      \"type\": \"error\"\r\n    },\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"NoProceeds\",\r\n      \"type\": \"error\"\r\n    },\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"NotApprovedForMarketplace\",\r\n      \"type\": \"error\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"nftAddress\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"NotListed\",\r\n      \"type\": \"error\"\r\n    },\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"NotOwner\",\r\n      \"type\": \"error\"\r\n    },\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"PriceMustBeAboveZero\",\r\n      \"type\": \"error\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"nftAddress\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"price\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"PriceNotMet\",\r\n      \"type\": \"error\"\r\n    },\r\n    {\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"buyer\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"nftAddress\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        },\r\n        {\r\n          \"indexed\": false,\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"price\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"ItemBought\",\r\n      \"type\": \"event\"\r\n    },\r\n    {\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"seller\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"nftAddress\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"ItemCanceled\",\r\n      \"type\": \"event\"\r\n    },\r\n    {\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"seller\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"nftAddress\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        },\r\n        {\r\n          \"indexed\": false,\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"price\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"ItemListed\",\r\n      \"type\": \"event\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"nftAddress\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"buyItem\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"payable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"nftAddress\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"cancelListing\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"nftAddress\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"getListing\",\r\n      \"outputs\": [\r\n        {\r\n          \"components\": [\r\n            {\r\n              \"internalType\": \"uint256\",\r\n              \"name\": \"price\",\r\n              \"type\": \"uint256\"\r\n            },\r\n            {\r\n              \"internalType\": \"address\",\r\n              \"name\": \"seller\",\r\n              \"type\": \"address\"\r\n            }\r\n          ],\r\n          \"internalType\": \"struct NftMarketplace.Listing\",\r\n          \"name\": \"\",\r\n          \"type\": \"tuple\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"seller\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"name\": \"getProceeds\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"nftAddress\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"price\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"listItem\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"nftAddress\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"newPrice\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"updateListing\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"withdrawProceeds\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    }\r\n  ],\r\n  \"bytecode\": \"\",\r\n  \"deployedBytecode\": \"0x6080604052600436106100705760003560e01c80639038e6931161004e5780639038e693146101185780639f37092a1461012f578063b2ddee061461014b578063f772adf11461017457610070565b806330cfeda91461007557806388700d1c146100b257806389bfd38f146100ef575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190611354565b61019d565b6040516100a9919061160c565b60405180910390f35b3480156100be57600080fd5b506100d960048036038101906100d491906113a6565b6101e6565b6040516100e691906115f1565b60405180910390f35b3480156100fb57600080fd5b50610116600480360381019061011191906113e2565b6102b1565b005b34801561012457600080fd5b5061012d610729565b005b610149600480360381019061014491906113a6565b61089c565b005b34801561015757600080fd5b50610172600480360381019061016d91906113a6565b610ccf565b005b34801561018057600080fd5b5061019b600480360381019061019691906113e2565b610fbe565b005b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6101ee6112e5565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b8282336000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111156103bf5783836040517f4a5568d50000000000000000000000000000000000000000000000000000000081526004016103b6929190611551565b60405180910390fd5b868633600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610402919061160c565b60206040518083038186803b15801561041a57600080fd5b505afa15801561042e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610452919061137d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146104b9576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a116104f3576040517fe1abbfc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008c90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8e6040518263ffffffff1660e01b8152600401610548919061160c565b60206040518083038186803b15801561056057600080fd5b505afa158015610574573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610598919061137d565b73ffffffffffffffffffffffffffffffffffffffff16146105e5576040517f4be3a2c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808c81526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508b8d73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48e604051610712919061160c565b60405180910390a450505050505050505050505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116107a7576040517fc4d8fa8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161081290611505565b60006040518083038185875af1925050503d806000811461084f576040519150601f19603f3d011682016040523d82523d6000602084013e610854565b606091505b5050905080610898576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088f906115b1565b60405180910390fd5b5050565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060008160000151116109a85782826040517f6831488c00000000000000000000000000000000000000000000000000000000815260040161099f929190611551565b60405180910390fd5b600260005414156109ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e5906115d1565b60405180910390fd5b60026000819055506000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060000151341015610b0657858582600001516040517f7c934565000000000000000000000000000000000000000000000000000000008152600401610afd9392919061157a565b60405180910390fd5b3460026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b599190611643565b92505081905550600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508573ffffffffffffffffffffffffffffffffffffffff166342842e0e826020015133886040518463ffffffff1660e01b8152600401610c239392919061151a565b600060405180830381600087803b158015610c3d57600080fd5b505af1158015610c51573d6000803e3d6000fd5b50505050848673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f263223b1dd81e51054a4e6f791d45a4a1ddb4aadcd93a2dfd892615c3fdac1878460000151604051610cb7919061160c565b60405180910390a45060016000819055505050505050565b818133600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610d12919061160c565b60206040518083038186803b158015610d2a57600080fd5b505afa158015610d3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d62919061137d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610dc9576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86866000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111610ed55782826040517f6831488c000000000000000000000000000000000000000000000000000000008152600401610ecc929190611551565b60405180910390fd5b600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a81526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050888a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9ba1a3cb55ce8d63d072a886f94d2a744f50cddf82128e897d0661f5ec62315860405160405180910390a450505050505050505050565b82826000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060008160000151116110ca5782826040517f6831488c0000000000000000000000000000000000000000000000000000000081526004016110c1929190611551565b60405180910390fd5b60026000541415611110576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611107906115d1565b60405180910390fd5b6002600081905550858533600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161115b919061160c565b60206040518083038186803b15801561117357600080fd5b505afa158015611187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ab919061137d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611212576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b88600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060000181905550898b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48c6040516112c8919061160c565b60405180910390a450505050506001600081905550505050505050565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60008135905061132481611759565b92915050565b60008151905061133981611759565b92915050565b60008135905061134e81611770565b92915050565b60006020828403121561136657600080fd5b600061137484828501611315565b91505092915050565b60006020828403121561138f57600080fd5b600061139d8482850161132a565b91505092915050565b600080604083850312156113b957600080fd5b60006113c785828601611315565b92505060206113d88582860161133f565b9150509250929050565b6000806000606084860312156113f757600080fd5b600061140586828701611315565b93505060206114168682870161133f565b92505060406114278682870161133f565b9150509250925092565b61143a81611699565b82525050565b61144981611699565b82525050565b600061145c600f83611632565b915061146782611704565b602082019050919050565b600061147f600083611627565b915061148a8261172d565b600082019050919050565b60006114a2601f83611632565b91506114ad82611730565b602082019050919050565b6040820160008201516114ce60008501826114e7565b5060208201516114e16020850182611431565b50505050565b6114f0816116cb565b82525050565b6114ff816116cb565b82525050565b600061151082611472565b9150819050919050565b600060608201905061152f6000830186611440565b61153c6020830185611440565b61154960408301846114f6565b949350505050565b60006040820190506115666000830185611440565b61157360208301846114f6565b9392505050565b600060608201905061158f6000830186611440565b61159c60208301856114f6565b6115a960408301846114f6565b949350505050565b600060208201905081810360008301526115ca8161144f565b9050919050565b600060208201905081810360008301526115ea81611495565b9050919050565b600060408201905061160660008301846114b8565b92915050565b600060208201905061162160008301846114f6565b92915050565b600081905092915050565b600082825260208201905092915050565b600061164e826116cb565b9150611659836116cb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561168e5761168d6116d5565b5b828201905092915050565b60006116a4826116ab565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b50565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61176281611699565b811461176d57600080fd5b50565b611779816116cb565b811461178457600080fd5b5056fea2646970667358221220613eb4f85c3ef77aa033b680e3963b670873b4be4e5409bed132fb1f8eb1ab8964736f6c63430008040033\",\r\n  \"linkReferences\": {},\r\n  \"deployedLinkReferences\": {}\r\n}","export const nftAbi = {\r\n  \"_format\": \"hh-sol-artifact-1\",\r\n  \"contractName\": \"NFT\",\r\n  \"sourceName\": \"contracts/MyNFT.sol\",\r\n  \"abi\": [\r\n    {\r\n      \"inputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"constructor\"\r\n    },\r\n    {\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"owner\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"approved\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"Approval\",\r\n      \"type\": \"event\"\r\n    },\r\n    {\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"owner\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"operator\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": false,\r\n          \"internalType\": \"bool\",\r\n          \"name\": \"approved\",\r\n          \"type\": \"bool\"\r\n        }\r\n      ],\r\n      \"name\": \"ApprovalForAll\",\r\n      \"type\": \"event\"\r\n    },\r\n    {\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"previousOwner\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"newOwner\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"name\": \"OwnershipTransferred\",\r\n      \"type\": \"event\"\r\n    },\r\n    {\r\n      \"anonymous\": false,\r\n      \"inputs\": [\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"from\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"address\",\r\n          \"name\": \"to\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"indexed\": true,\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"Transfer\",\r\n      \"type\": \"event\"\r\n    },\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"TOTAL_SUPPLY\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"to\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"approve\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"owner\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"name\": \"balanceOf\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"baseTokenURI\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"string\",\r\n          \"name\": \"\",\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"getApproved\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"owner\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"operator\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"name\": \"isApprovedForAll\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"bool\",\r\n          \"name\": \"\",\r\n          \"type\": \"bool\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"name\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"string\",\r\n          \"name\": \"\",\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"owner\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"ownerOf\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"dest\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"name\": \"payments\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"renounceOwnership\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"to\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"string\",\r\n          \"name\": \"uri\",\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"name\": \"safeMint\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"payable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"from\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"to\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"safeTransferFrom\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"from\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"to\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        },\r\n        {\r\n          \"internalType\": \"bytes\",\r\n          \"name\": \"_data\",\r\n          \"type\": \"bytes\"\r\n        }\r\n      ],\r\n      \"name\": \"safeTransferFrom\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"operator\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"bool\",\r\n          \"name\": \"approved\",\r\n          \"type\": \"bool\"\r\n        }\r\n      ],\r\n      \"name\": \"setApprovalForAll\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"string\",\r\n          \"name\": \"_baseTokenURI\",\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"name\": \"setBaseTokenURI\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"bytes4\",\r\n          \"name\": \"interfaceId\",\r\n          \"type\": \"bytes4\"\r\n        }\r\n      ],\r\n      \"name\": \"supportsInterface\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"bool\",\r\n          \"name\": \"\",\r\n          \"type\": \"bool\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"symbol\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"string\",\r\n          \"name\": \"\",\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"index\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"tokenByIndex\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"owner\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"index\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"tokenOfOwnerByIndex\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"tokenURI\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"string\",\r\n          \"name\": \"\",\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [],\r\n      \"name\": \"totalSupply\",\r\n      \"outputs\": [\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"stateMutability\": \"view\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"from\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"to\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"transferFrom\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"newOwner\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"name\": \"transferOwnership\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    },\r\n    {\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address payable\",\r\n          \"name\": \"payee\",\r\n          \"type\": \"address\"\r\n        }\r\n      ],\r\n      \"name\": \"withdrawPayments\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    }\r\n  ],\r\n  \"bytecode\": \"0x60a06040523480156200001157600080fd5b506040518060400160405280600381526020017f4e465400000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f564d53000000000000000000000000000000000000000000000000000000000081525081600090805190602001906200009692919062000230565b508060019080519060200190620000af92919062000230565b505050620000d2620000c66200016260201b60201c565b6200016a60201b60201c565b604051620000e090620002c1565b604051809103906000f080158015620000fd573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060405180602001604052806000815250600d90805190602001906200015b92919062000230565b5062000353565b600033905090565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200023e90620002ee565b90600052602060002090601f016020900481019282620002625760008555620002ae565b82601f106200027d57805160ff1916838001178555620002ae565b82800160010185558215620002ae579182015b82811115620002ad57825182559160200191906001019062000290565b5b509050620002bd9190620002cf565b5090565b610d09806200424b83390190565b5b80821115620002ea576000816000905550600101620002d0565b5090565b600060028204905060018216806200030757607f821691505b602082108114156200031e576200031d62000324565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60805160601c613ed26200037960003960008181610f73015261169b0152613ed26000f3fe6080604052600436106101665760003560e01c806370a08231116100d1578063b88d4fde1161008a578063d547cfb711610064578063d547cfb71461053f578063e2982c211461056a578063e985e9c5146105a7578063f2fde38b146105e457610166565b8063b88d4fde146104bd578063c87b56dd146104e6578063d204c45e1461052357610166565b806370a08231146103bf578063715018a6146103fc5780638da5cb5b14610413578063902d55a51461043e57806395d89b4114610469578063a22cb4651461049457610166565b80632f745c59116101235780632f745c591461028d57806330176e13146102ca57806331b3eb94146102f357806342842e0e1461031c5780634f6ccce7146103455780636352211e1461038257610166565b806301ffc9a71461016b57806306fdde03146101a8578063081812fc146101d3578063095ea7b31461021057806318160ddd1461023957806323b872dd14610264575b600080fd5b34801561017757600080fd5b50610192600480360381019061018d9190612c34565b61060d565b60405161019f919061317d565b60405180910390f35b3480156101b457600080fd5b506101bd61061f565b6040516101ca9190613198565b60405180910390f35b3480156101df57600080fd5b506101fa60048036038101906101f59190612cc7565b6106b1565b60405161020791906130fb565b60405180910390f35b34801561021c57600080fd5b5061023760048036038101906102329190612bf8565b610736565b005b34801561024557600080fd5b5061024e61084e565b60405161025b919061345a565b60405180910390f35b34801561027057600080fd5b5061028b60048036038101906102869190612a9e565b61085b565b005b34801561029957600080fd5b506102b460048036038101906102af9190612bf8565b6108bb565b6040516102c1919061345a565b60405180910390f35b3480156102d657600080fd5b506102f160048036038101906102ec9190612c86565b610960565b005b3480156102ff57600080fd5b5061031a60048036038101906103159190612a39565b6109f6565b005b34801561032857600080fd5b50610343600480360381019061033e9190612a9e565b610a7e565b005b34801561035157600080fd5b5061036c60048036038101906103679190612cc7565b610a9e565b604051610379919061345a565b60405180910390f35b34801561038e57600080fd5b506103a960048036038101906103a49190612cc7565b610b35565b6040516103b691906130fb565b60405180910390f35b3480156103cb57600080fd5b506103e660048036038101906103e19190612a10565b610be7565b6040516103f3919061345a565b60405180910390f35b34801561040857600080fd5b50610411610c9f565b005b34801561041f57600080fd5b50610428610d27565b60405161043591906130fb565b60405180910390f35b34801561044a57600080fd5b50610453610d51565b604051610460919061345a565b60405180910390f35b34801561047557600080fd5b5061047e610d57565b60405161048b9190613198565b60405180910390f35b3480156104a057600080fd5b506104bb60048036038101906104b69190612b68565b610de9565b005b3480156104c957600080fd5b506104e460048036038101906104df9190612aed565b610df8565b005b3480156104f257600080fd5b5061050d60048036038101906105089190612cc7565b610e5a565b60405161051a9190613198565b60405180910390f35b61053d60048036038101906105389190612ba4565b610e6c565b005b34801561054b57600080fd5b50610554610ee1565b6040516105619190613198565b60405180910390f35b34801561057657600080fd5b50610591600480360381019061058c9190612a10565b610f6f565b60405161059e919061345a565b60405180910390f35b3480156105b357600080fd5b506105ce60048036038101906105c99190612a62565b611021565b6040516105db919061317d565b60405180910390f35b3480156105f057600080fd5b5061060b60048036038101906106069190612a10565b6110b5565b005b6000610618826111ad565b9050919050565b60606000805461062e906136c2565b80601f016020809104026020016040519081016040528092919081815260200182805461065a906136c2565b80156106a75780601f1061067c576101008083540402835291602001916106a7565b820191906000526020600020905b81548152906001019060200180831161068a57829003601f168201915b5050505050905090565b60006106bc82611227565b6106fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f29061337a565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061074182610b35565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906133da565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107d1611293565b73ffffffffffffffffffffffffffffffffffffffff16148061080057506107ff816107fa611293565b611021565b5b61083f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610836906132ba565b60405180910390fd5b610849838361129b565b505050565b6000600880549050905090565b61086c610866611293565b82611354565b6108ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a2906133fa565b60405180910390fd5b6108b6838383611432565b505050565b60006108c683610be7565b8210610907576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fe906131ba565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610968611293565b73ffffffffffffffffffffffffffffffffffffffff16610986610d27565b73ffffffffffffffffffffffffffffffffffffffff16146109dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d39061339a565b60405180910390fd5b80600d90805190602001906109f292919061280a565b5050565b6109fe611293565b73ffffffffffffffffffffffffffffffffffffffff16610a1c610d27565b73ffffffffffffffffffffffffffffffffffffffff1614610a72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a699061339a565b60405180910390fd5b610a7b81611699565b50565b610a9983838360405180602001604052806000815250610df8565b505050565b6000610aa861084e565b8210610ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae09061343a565b60405180910390fd5b60088281548110610b23577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd5906132fa565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4f906132da565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610ca7611293565b73ffffffffffffffffffffffffffffffffffffffff16610cc5610d27565b73ffffffffffffffffffffffffffffffffffffffff1614610d1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d129061339a565b60405180910390fd5b610d256000611727565b565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61271081565b606060018054610d66906136c2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d92906136c2565b8015610ddf5780601f10610db457610100808354040283529160200191610ddf565b820191906000526020600020905b815481529060010190602001808311610dc257829003601f168201915b5050505050905090565b610df43383836117ed565b5050565b610e09610e03611293565b83611354565b610e48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3f906133fa565b60405180910390fd5b610e548484848461195a565b50505050565b6060610e65826119b6565b9050919050565b6000610e78600c611b08565b90506127108110610ebe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb59061341a565b60405180910390fd5b610ec8600c611b16565b610ed28382611b2c565b610edc8183611b4a565b505050565b600d8054610eee906136c2565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1a906136c2565b8015610f675780601f10610f3c57610100808354040283529160200191610f67565b820191906000526020600020905b815481529060010190602001808311610f4a57829003601f168201915b505050505081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e3a9db1a836040518263ffffffff1660e01b8152600401610fca91906130fb565b60206040518083038186803b158015610fe257600080fd5b505afa158015610ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101a9190612cf0565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6110bd611293565b73ffffffffffffffffffffffffffffffffffffffff166110db610d27565b73ffffffffffffffffffffffffffffffffffffffff1614611131576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111289061339a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611198906131fa565b60405180910390fd5b6111aa81611727565b50565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611220575061121f82611bbe565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661130e83610b35565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061135f82611227565b61139e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113959061329a565b60405180910390fd5b60006113a983610b35565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113eb57506113ea8185611021565b5b8061142957508373ffffffffffffffffffffffffffffffffffffffff16611411846106b1565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661145282610b35565b73ffffffffffffffffffffffffffffffffffffffff16146114a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149f9061321a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150f9061325a565b60405180910390fd5b611523838383611ca0565b61152e60008261129b565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461157e91906135c6565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115d5919061353f565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611694838383611cb0565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166351cff8d9826040518263ffffffff1660e01b81526004016116f29190613116565b600060405180830381600087803b15801561170c57600080fd5b505af1158015611720573d6000803e3d6000fd5b5050505050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561185c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118539061327a565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161194d919061317d565b60405180910390a3505050565b611965848484611432565b61197184848484611cb5565b6119b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a7906131da565b60405180910390fd5b50505050565b60606119c182611227565b611a00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f79061335a565b60405180910390fd5b6000600a60008481526020019081526020016000208054611a20906136c2565b80601f0160208091040260200160405190810160405280929190818152602001828054611a4c906136c2565b8015611a995780601f10611a6e57610100808354040283529160200191611a99565b820191906000526020600020905b815481529060010190602001808311611a7c57829003601f168201915b505050505090506000611aaa611e4c565b9050600081511415611ac0578192505050611b03565b600082511115611af5578082604051602001611add9291906130d7565b60405160208183030381529060405292505050611b03565b611afe84611e63565b925050505b919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b611b46828260405180602001604052806000815250611f0a565b5050565b611b5382611227565b611b92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b899061331a565b60405180910390fd5b80600a60008481526020019081526020016000209080519060200190611bb992919061280a565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611c8957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611c995750611c9882611f65565b5b9050919050565b611cab838383611fcf565b505050565b505050565b6000611cd68473ffffffffffffffffffffffffffffffffffffffff166120e3565b15611e3f578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611cff611293565b8786866040518563ffffffff1660e01b8152600401611d219493929190613131565b602060405180830381600087803b158015611d3b57600080fd5b505af1925050508015611d6c57506040513d601f19601f82011682018060405250810190611d699190612c5d565b60015b611def573d8060008114611d9c576040519150601f19603f3d011682016040523d82523d6000602084013e611da1565b606091505b50600081511415611de7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dde906131da565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611e44565b600190505b949350505050565b606060405180602001604052806000815250905090565b6060611e6e82611227565b611ead576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea4906133ba565b60405180910390fd5b6000611eb7611e4c565b90506000815111611ed75760405180602001604052806000815250611f02565b80611ee184612106565b604051602001611ef29291906130d7565b6040516020818303038152906040525b915050919050565b611f1483836122b3565b611f216000848484611cb5565b611f60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f57906131da565b60405180910390fd5b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611fda83838361248d565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561201d5761201881612492565b61205c565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461205b5761205a83826124db565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561209f5761209a81612648565b6120de565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146120dd576120dc828261278b565b5b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060600082141561214e576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506122ae565b600082905060005b6000821461218057808061216990613725565b915050600a826121799190613595565b9150612156565b60008167ffffffffffffffff8111156121c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121f45781602001600182028036833780820191505090505b5090505b600085146122a75760018261220d91906135c6565b9150600a8561221c919061376e565b6030612228919061353f565b60f81b818381518110612264577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856122a09190613595565b94506121f8565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231a9061333a565b60405180910390fd5b61232c81611227565b1561236c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123639061323a565b60405180910390fd5b61237860008383611ca0565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123c8919061353f565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461248960008383611cb0565b5050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016124e884610be7565b6124f291906135c6565b90506000600760008481526020019081526020016000205490508181146125d7576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061265c91906135c6565b90506000600960008481526020019081526020016000205490506000600883815481106126b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080600883815481106126fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508160096000838152602001908152602001600020819055506009600085815260200190815260200160002060009055600880548061276f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061279683610be7565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b828054612816906136c2565b90600052602060002090601f016020900481019282612838576000855561287f565b82601f1061285157805160ff191683800117855561287f565b8280016001018555821561287f579182015b8281111561287e578251825591602001919060010190612863565b5b50905061288c9190612890565b5090565b5b808211156128a9576000816000905550600101612891565b5090565b60006128c06128bb8461349a565b613475565b9050828152602081018484840111156128d857600080fd5b6128e3848285613680565b509392505050565b60006128fe6128f9846134cb565b613475565b90508281526020810184848401111561291657600080fd5b612921848285613680565b509392505050565b60008135905061293881613e29565b92915050565b60008135905061294d81613e40565b92915050565b60008135905061296281613e57565b92915050565b60008135905061297781613e6e565b92915050565b60008151905061298c81613e6e565b92915050565b600082601f8301126129a357600080fd5b81356129b38482602086016128ad565b91505092915050565b600082601f8301126129cd57600080fd5b81356129dd8482602086016128eb565b91505092915050565b6000813590506129f581613e85565b92915050565b600081519050612a0a81613e85565b92915050565b600060208284031215612a2257600080fd5b6000612a3084828501612929565b91505092915050565b600060208284031215612a4b57600080fd5b6000612a598482850161293e565b91505092915050565b60008060408385031215612a7557600080fd5b6000612a8385828601612929565b9250506020612a9485828601612929565b9150509250929050565b600080600060608486031215612ab357600080fd5b6000612ac186828701612929565b9350506020612ad286828701612929565b9250506040612ae3868287016129e6565b9150509250925092565b60008060008060808587031215612b0357600080fd5b6000612b1187828801612929565b9450506020612b2287828801612929565b9350506040612b33878288016129e6565b925050606085013567ffffffffffffffff811115612b5057600080fd5b612b5c87828801612992565b91505092959194509250565b60008060408385031215612b7b57600080fd5b6000612b8985828601612929565b9250506020612b9a85828601612953565b9150509250929050565b60008060408385031215612bb757600080fd5b6000612bc585828601612929565b925050602083013567ffffffffffffffff811115612be257600080fd5b612bee858286016129bc565b9150509250929050565b60008060408385031215612c0b57600080fd5b6000612c1985828601612929565b9250506020612c2a858286016129e6565b9150509250929050565b600060208284031215612c4657600080fd5b6000612c5484828501612968565b91505092915050565b600060208284031215612c6f57600080fd5b6000612c7d8482850161297d565b91505092915050565b600060208284031215612c9857600080fd5b600082013567ffffffffffffffff811115612cb257600080fd5b612cbe848285016129bc565b91505092915050565b600060208284031215612cd957600080fd5b6000612ce7848285016129e6565b91505092915050565b600060208284031215612d0257600080fd5b6000612d10848285016129fb565b91505092915050565b612d228161360c565b82525050565b612d31816135fa565b82525050565b612d408161361e565b82525050565b6000612d51826134fc565b612d5b8185613512565b9350612d6b81856020860161368f565b612d748161385b565b840191505092915050565b6000612d8a82613507565b612d948185613523565b9350612da481856020860161368f565b612dad8161385b565b840191505092915050565b6000612dc382613507565b612dcd8185613534565b9350612ddd81856020860161368f565b80840191505092915050565b6000612df6602b83613523565b9150612e018261386c565b604082019050919050565b6000612e19603283613523565b9150612e24826138bb565b604082019050919050565b6000612e3c602683613523565b9150612e478261390a565b604082019050919050565b6000612e5f602583613523565b9150612e6a82613959565b604082019050919050565b6000612e82601c83613523565b9150612e8d826139a8565b602082019050919050565b6000612ea5602483613523565b9150612eb0826139d1565b604082019050919050565b6000612ec8601983613523565b9150612ed382613a20565b602082019050919050565b6000612eeb602c83613523565b9150612ef682613a49565b604082019050919050565b6000612f0e603883613523565b9150612f1982613a98565b604082019050919050565b6000612f31602a83613523565b9150612f3c82613ae7565b604082019050919050565b6000612f54602983613523565b9150612f5f82613b36565b604082019050919050565b6000612f77602e83613523565b9150612f8282613b85565b604082019050919050565b6000612f9a602083613523565b9150612fa582613bd4565b602082019050919050565b6000612fbd603183613523565b9150612fc882613bfd565b604082019050919050565b6000612fe0602c83613523565b9150612feb82613c4c565b604082019050919050565b6000613003602083613523565b915061300e82613c9b565b602082019050919050565b6000613026602f83613523565b915061303182613cc4565b604082019050919050565b6000613049602183613523565b915061305482613d13565b604082019050919050565b600061306c603183613523565b915061307782613d62565b604082019050919050565b600061308f601283613523565b915061309a82613db1565b602082019050919050565b60006130b2602c83613523565b91506130bd82613dda565b604082019050919050565b6130d181613676565b82525050565b60006130e38285612db8565b91506130ef8284612db8565b91508190509392505050565b60006020820190506131106000830184612d28565b92915050565b600060208201905061312b6000830184612d19565b92915050565b60006080820190506131466000830187612d28565b6131536020830186612d28565b61316060408301856130c8565b81810360608301526131728184612d46565b905095945050505050565b60006020820190506131926000830184612d37565b92915050565b600060208201905081810360008301526131b28184612d7f565b905092915050565b600060208201905081810360008301526131d381612de9565b9050919050565b600060208201905081810360008301526131f381612e0c565b9050919050565b6000602082019050818103600083015261321381612e2f565b9050919050565b6000602082019050818103600083015261323381612e52565b9050919050565b6000602082019050818103600083015261325381612e75565b9050919050565b6000602082019050818103600083015261327381612e98565b9050919050565b6000602082019050818103600083015261329381612ebb565b9050919050565b600060208201905081810360008301526132b381612ede565b9050919050565b600060208201905081810360008301526132d381612f01565b9050919050565b600060208201905081810360008301526132f381612f24565b9050919050565b6000602082019050818103600083015261331381612f47565b9050919050565b6000602082019050818103600083015261333381612f6a565b9050919050565b6000602082019050818103600083015261335381612f8d565b9050919050565b6000602082019050818103600083015261337381612fb0565b9050919050565b6000602082019050818103600083015261339381612fd3565b9050919050565b600060208201905081810360008301526133b381612ff6565b9050919050565b600060208201905081810360008301526133d381613019565b9050919050565b600060208201905081810360008301526133f38161303c565b9050919050565b600060208201905081810360008301526134138161305f565b9050919050565b6000602082019050818103600083015261343381613082565b9050919050565b60006020820190508181036000830152613453816130a5565b9050919050565b600060208201905061346f60008301846130c8565b92915050565b600061347f613490565b905061348b82826136f4565b919050565b6000604051905090565b600067ffffffffffffffff8211156134b5576134b461382c565b5b6134be8261385b565b9050602081019050919050565b600067ffffffffffffffff8211156134e6576134e561382c565b5b6134ef8261385b565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061354a82613676565b915061355583613676565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561358a5761358961379f565b5b828201905092915050565b60006135a082613676565b91506135ab83613676565b9250826135bb576135ba6137ce565b5b828204905092915050565b60006135d182613676565b91506135dc83613676565b9250828210156135ef576135ee61379f565b5b828203905092915050565b600061360582613656565b9050919050565b600061361782613656565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156136ad578082015181840152602081019050613692565b838111156136bc576000848401525b50505050565b600060028204905060018216806136da57607f821691505b602082108114156136ee576136ed6137fd565b5b50919050565b6136fd8261385b565b810181811067ffffffffffffffff8211171561371c5761371b61382c565b5b80604052505050565b600061373082613676565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156137635761376261379f565b5b600182019050919050565b600061377982613676565b915061378483613676565b925082613794576137936137ce565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4d617820737570706c7920726561636865640000000000000000000000000000600082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b613e32816135fa565b8114613e3d57600080fd5b50565b613e498161360c565b8114613e5457600080fd5b50565b613e608161361e565b8114613e6b57600080fd5b50565b613e778161362a565b8114613e8257600080fd5b50565b613e8e81613676565b8114613e9957600080fd5b5056fea26469706673582212202b8046dfe529db8b362490ee23a015715ca0bec04bc5446dcf6d51c068beb10d64736f6c63430008040033608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610bfc8061010d6000396000f3fe6080604052600436106100555760003560e01c806351cff8d91461005a578063715018a6146100835780638da5cb5b1461009a578063e3a9db1a146100c5578063f2fde38b14610102578063f340fa011461012b575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c91906107f5565b610147565b005b34801561008f57600080fd5b506100986102c7565b005b3480156100a657600080fd5b506100af61034f565b6040516100bc9190610900565b60405180910390f35b3480156100d157600080fd5b506100ec60048036038101906100e791906107cc565b610378565b6040516100f9919061099b565b60405180910390f35b34801561010e57600080fd5b50610129600480360381019061012491906107cc565b6103c1565b005b610145600480360381019061014091906107cc565b6104b9565b005b61014f6105e2565b73ffffffffffffffffffffffffffffffffffffffff1661016d61034f565b73ffffffffffffffffffffffffffffffffffffffff16146101c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ba9061097b565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610275818373ffffffffffffffffffffffffffffffffffffffff166105ea90919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516102bb919061099b565b60405180910390a25050565b6102cf6105e2565b73ffffffffffffffffffffffffffffffffffffffff166102ed61034f565b73ffffffffffffffffffffffffffffffffffffffff1614610343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033a9061097b565b60405180910390fd5b61034d60006106de565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6103c96105e2565b73ffffffffffffffffffffffffffffffffffffffff166103e761034f565b73ffffffffffffffffffffffffffffffffffffffff161461043d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104349061097b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a49061091b565b60405180910390fd5b6104b6816106de565b50565b6104c16105e2565b73ffffffffffffffffffffffffffffffffffffffff166104df61034f565b73ffffffffffffffffffffffffffffffffffffffff1614610535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052c9061097b565b60405180910390fd5b600034905080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461058991906109d2565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4826040516105d6919061099b565b60405180910390a25050565b600033905090565b8047101561062d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106249061095b565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610653906108eb565b60006040518083038185875af1925050503d8060008114610690576040519150601f19603f3d011682016040523d82523d6000602084013e610695565b606091505b50509050806106d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d09061093b565b60405180910390fd5b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000813590506107b181610b98565b92915050565b6000813590506107c681610baf565b92915050565b6000602082840312156107de57600080fd5b60006107ec848285016107a2565b91505092915050565b60006020828403121561080757600080fd5b6000610815848285016107b7565b91505092915050565b61082781610a28565b82525050565b600061083a6026836109c1565b915061084582610aa5565b604082019050919050565b600061085d603a836109c1565b915061086882610af4565b604082019050919050565b6000610880601d836109c1565b915061088b82610b43565b602082019050919050565b60006108a36020836109c1565b91506108ae82610b6c565b602082019050919050565b60006108c66000836109b6565b91506108d182610b95565b600082019050919050565b6108e581610a6c565b82525050565b60006108f6826108b9565b9150819050919050565b6000602082019050610915600083018461081e565b92915050565b600060208201905081810360008301526109348161082d565b9050919050565b6000602082019050818103600083015261095481610850565b9050919050565b6000602082019050818103600083015261097481610873565b9050919050565b6000602082019050818103600083015261099481610896565b9050919050565b60006020820190506109b060008301846108dc565b92915050565b600081905092915050565b600082825260208201905092915050565b60006109dd82610a6c565b91506109e883610a6c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a1d57610a1c610a76565b5b828201905092915050565b6000610a3382610a4c565b9050919050565b6000610a4582610a4c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b50565b610ba181610a28565b8114610bac57600080fd5b50565b610bb881610a3a565b8114610bc357600080fd5b5056fea2646970667358221220b2a6db4c00e57e7ef608d5e81a53c60e6688cd2b85172cc39bb6858c6c6988ec64736f6c63430008040033\",\r\n  \"deployedBytecode\": \"0x6080604052600436106101665760003560e01c806370a08231116100d1578063b88d4fde1161008a578063d547cfb711610064578063d547cfb71461053f578063e2982c211461056a578063e985e9c5146105a7578063f2fde38b146105e457610166565b8063b88d4fde146104bd578063c87b56dd146104e6578063d204c45e1461052357610166565b806370a08231146103bf578063715018a6146103fc5780638da5cb5b14610413578063902d55a51461043e57806395d89b4114610469578063a22cb4651461049457610166565b80632f745c59116101235780632f745c591461028d57806330176e13146102ca57806331b3eb94146102f357806342842e0e1461031c5780634f6ccce7146103455780636352211e1461038257610166565b806301ffc9a71461016b57806306fdde03146101a8578063081812fc146101d3578063095ea7b31461021057806318160ddd1461023957806323b872dd14610264575b600080fd5b34801561017757600080fd5b50610192600480360381019061018d9190612c34565b61060d565b60405161019f919061317d565b60405180910390f35b3480156101b457600080fd5b506101bd61061f565b6040516101ca9190613198565b60405180910390f35b3480156101df57600080fd5b506101fa60048036038101906101f59190612cc7565b6106b1565b60405161020791906130fb565b60405180910390f35b34801561021c57600080fd5b5061023760048036038101906102329190612bf8565b610736565b005b34801561024557600080fd5b5061024e61084e565b60405161025b919061345a565b60405180910390f35b34801561027057600080fd5b5061028b60048036038101906102869190612a9e565b61085b565b005b34801561029957600080fd5b506102b460048036038101906102af9190612bf8565b6108bb565b6040516102c1919061345a565b60405180910390f35b3480156102d657600080fd5b506102f160048036038101906102ec9190612c86565b610960565b005b3480156102ff57600080fd5b5061031a60048036038101906103159190612a39565b6109f6565b005b34801561032857600080fd5b50610343600480360381019061033e9190612a9e565b610a7e565b005b34801561035157600080fd5b5061036c60048036038101906103679190612cc7565b610a9e565b604051610379919061345a565b60405180910390f35b34801561038e57600080fd5b506103a960048036038101906103a49190612cc7565b610b35565b6040516103b691906130fb565b60405180910390f35b3480156103cb57600080fd5b506103e660048036038101906103e19190612a10565b610be7565b6040516103f3919061345a565b60405180910390f35b34801561040857600080fd5b50610411610c9f565b005b34801561041f57600080fd5b50610428610d27565b60405161043591906130fb565b60405180910390f35b34801561044a57600080fd5b50610453610d51565b604051610460919061345a565b60405180910390f35b34801561047557600080fd5b5061047e610d57565b60405161048b9190613198565b60405180910390f35b3480156104a057600080fd5b506104bb60048036038101906104b69190612b68565b610de9565b005b3480156104c957600080fd5b506104e460048036038101906104df9190612aed565b610df8565b005b3480156104f257600080fd5b5061050d60048036038101906105089190612cc7565b610e5a565b60405161051a9190613198565b60405180910390f35b61053d60048036038101906105389190612ba4565b610e6c565b005b34801561054b57600080fd5b50610554610ee1565b6040516105619190613198565b60405180910390f35b34801561057657600080fd5b50610591600480360381019061058c9190612a10565b610f6f565b60405161059e919061345a565b60405180910390f35b3480156105b357600080fd5b506105ce60048036038101906105c99190612a62565b611021565b6040516105db919061317d565b60405180910390f35b3480156105f057600080fd5b5061060b60048036038101906106069190612a10565b6110b5565b005b6000610618826111ad565b9050919050565b60606000805461062e906136c2565b80601f016020809104026020016040519081016040528092919081815260200182805461065a906136c2565b80156106a75780601f1061067c576101008083540402835291602001916106a7565b820191906000526020600020905b81548152906001019060200180831161068a57829003601f168201915b5050505050905090565b60006106bc82611227565b6106fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f29061337a565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061074182610b35565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906133da565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107d1611293565b73ffffffffffffffffffffffffffffffffffffffff16148061080057506107ff816107fa611293565b611021565b5b61083f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610836906132ba565b60405180910390fd5b610849838361129b565b505050565b6000600880549050905090565b61086c610866611293565b82611354565b6108ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a2906133fa565b60405180910390fd5b6108b6838383611432565b505050565b60006108c683610be7565b8210610907576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fe906131ba565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610968611293565b73ffffffffffffffffffffffffffffffffffffffff16610986610d27565b73ffffffffffffffffffffffffffffffffffffffff16146109dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d39061339a565b60405180910390fd5b80600d90805190602001906109f292919061280a565b5050565b6109fe611293565b73ffffffffffffffffffffffffffffffffffffffff16610a1c610d27565b73ffffffffffffffffffffffffffffffffffffffff1614610a72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a699061339a565b60405180910390fd5b610a7b81611699565b50565b610a9983838360405180602001604052806000815250610df8565b505050565b6000610aa861084e565b8210610ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae09061343a565b60405180910390fd5b60088281548110610b23577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd5906132fa565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4f906132da565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610ca7611293565b73ffffffffffffffffffffffffffffffffffffffff16610cc5610d27565b73ffffffffffffffffffffffffffffffffffffffff1614610d1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d129061339a565b60405180910390fd5b610d256000611727565b565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61271081565b606060018054610d66906136c2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d92906136c2565b8015610ddf5780601f10610db457610100808354040283529160200191610ddf565b820191906000526020600020905b815481529060010190602001808311610dc257829003601f168201915b5050505050905090565b610df43383836117ed565b5050565b610e09610e03611293565b83611354565b610e48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3f906133fa565b60405180910390fd5b610e548484848461195a565b50505050565b6060610e65826119b6565b9050919050565b6000610e78600c611b08565b90506127108110610ebe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb59061341a565b60405180910390fd5b610ec8600c611b16565b610ed28382611b2c565b610edc8183611b4a565b505050565b600d8054610eee906136c2565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1a906136c2565b8015610f675780601f10610f3c57610100808354040283529160200191610f67565b820191906000526020600020905b815481529060010190602001808311610f4a57829003601f168201915b505050505081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e3a9db1a836040518263ffffffff1660e01b8152600401610fca91906130fb565b60206040518083038186803b158015610fe257600080fd5b505afa158015610ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101a9190612cf0565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6110bd611293565b73ffffffffffffffffffffffffffffffffffffffff166110db610d27565b73ffffffffffffffffffffffffffffffffffffffff1614611131576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111289061339a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611198906131fa565b60405180910390fd5b6111aa81611727565b50565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611220575061121f82611bbe565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661130e83610b35565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061135f82611227565b61139e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113959061329a565b60405180910390fd5b60006113a983610b35565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113eb57506113ea8185611021565b5b8061142957508373ffffffffffffffffffffffffffffffffffffffff16611411846106b1565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661145282610b35565b73ffffffffffffffffffffffffffffffffffffffff16146114a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149f9061321a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150f9061325a565b60405180910390fd5b611523838383611ca0565b61152e60008261129b565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461157e91906135c6565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115d5919061353f565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611694838383611cb0565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166351cff8d9826040518263ffffffff1660e01b81526004016116f29190613116565b600060405180830381600087803b15801561170c57600080fd5b505af1158015611720573d6000803e3d6000fd5b5050505050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561185c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118539061327a565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161194d919061317d565b60405180910390a3505050565b611965848484611432565b61197184848484611cb5565b6119b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a7906131da565b60405180910390fd5b50505050565b60606119c182611227565b611a00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f79061335a565b60405180910390fd5b6000600a60008481526020019081526020016000208054611a20906136c2565b80601f0160208091040260200160405190810160405280929190818152602001828054611a4c906136c2565b8015611a995780601f10611a6e57610100808354040283529160200191611a99565b820191906000526020600020905b815481529060010190602001808311611a7c57829003601f168201915b505050505090506000611aaa611e4c565b9050600081511415611ac0578192505050611b03565b600082511115611af5578082604051602001611add9291906130d7565b60405160208183030381529060405292505050611b03565b611afe84611e63565b925050505b919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b611b46828260405180602001604052806000815250611f0a565b5050565b611b5382611227565b611b92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b899061331a565b60405180910390fd5b80600a60008481526020019081526020016000209080519060200190611bb992919061280a565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611c8957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611c995750611c9882611f65565b5b9050919050565b611cab838383611fcf565b505050565b505050565b6000611cd68473ffffffffffffffffffffffffffffffffffffffff166120e3565b15611e3f578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611cff611293565b8786866040518563ffffffff1660e01b8152600401611d219493929190613131565b602060405180830381600087803b158015611d3b57600080fd5b505af1925050508015611d6c57506040513d601f19601f82011682018060405250810190611d699190612c5d565b60015b611def573d8060008114611d9c576040519150601f19603f3d011682016040523d82523d6000602084013e611da1565b606091505b50600081511415611de7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dde906131da565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611e44565b600190505b949350505050565b606060405180602001604052806000815250905090565b6060611e6e82611227565b611ead576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea4906133ba565b60405180910390fd5b6000611eb7611e4c565b90506000815111611ed75760405180602001604052806000815250611f02565b80611ee184612106565b604051602001611ef29291906130d7565b6040516020818303038152906040525b915050919050565b611f1483836122b3565b611f216000848484611cb5565b611f60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f57906131da565b60405180910390fd5b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611fda83838361248d565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561201d5761201881612492565b61205c565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461205b5761205a83826124db565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561209f5761209a81612648565b6120de565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146120dd576120dc828261278b565b5b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060600082141561214e576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506122ae565b600082905060005b6000821461218057808061216990613725565b915050600a826121799190613595565b9150612156565b60008167ffffffffffffffff8111156121c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121f45781602001600182028036833780820191505090505b5090505b600085146122a75760018261220d91906135c6565b9150600a8561221c919061376e565b6030612228919061353f565b60f81b818381518110612264577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856122a09190613595565b94506121f8565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231a9061333a565b60405180910390fd5b61232c81611227565b1561236c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123639061323a565b60405180910390fd5b61237860008383611ca0565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123c8919061353f565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461248960008383611cb0565b5050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016124e884610be7565b6124f291906135c6565b90506000600760008481526020019081526020016000205490508181146125d7576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061265c91906135c6565b90506000600960008481526020019081526020016000205490506000600883815481106126b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080600883815481106126fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508160096000838152602001908152602001600020819055506009600085815260200190815260200160002060009055600880548061276f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061279683610be7565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b828054612816906136c2565b90600052602060002090601f016020900481019282612838576000855561287f565b82601f1061285157805160ff191683800117855561287f565b8280016001018555821561287f579182015b8281111561287e578251825591602001919060010190612863565b5b50905061288c9190612890565b5090565b5b808211156128a9576000816000905550600101612891565b5090565b60006128c06128bb8461349a565b613475565b9050828152602081018484840111156128d857600080fd5b6128e3848285613680565b509392505050565b60006128fe6128f9846134cb565b613475565b90508281526020810184848401111561291657600080fd5b612921848285613680565b509392505050565b60008135905061293881613e29565b92915050565b60008135905061294d81613e40565b92915050565b60008135905061296281613e57565b92915050565b60008135905061297781613e6e565b92915050565b60008151905061298c81613e6e565b92915050565b600082601f8301126129a357600080fd5b81356129b38482602086016128ad565b91505092915050565b600082601f8301126129cd57600080fd5b81356129dd8482602086016128eb565b91505092915050565b6000813590506129f581613e85565b92915050565b600081519050612a0a81613e85565b92915050565b600060208284031215612a2257600080fd5b6000612a3084828501612929565b91505092915050565b600060208284031215612a4b57600080fd5b6000612a598482850161293e565b91505092915050565b60008060408385031215612a7557600080fd5b6000612a8385828601612929565b9250506020612a9485828601612929565b9150509250929050565b600080600060608486031215612ab357600080fd5b6000612ac186828701612929565b9350506020612ad286828701612929565b9250506040612ae3868287016129e6565b9150509250925092565b60008060008060808587031215612b0357600080fd5b6000612b1187828801612929565b9450506020612b2287828801612929565b9350506040612b33878288016129e6565b925050606085013567ffffffffffffffff811115612b5057600080fd5b612b5c87828801612992565b91505092959194509250565b60008060408385031215612b7b57600080fd5b6000612b8985828601612929565b9250506020612b9a85828601612953565b9150509250929050565b60008060408385031215612bb757600080fd5b6000612bc585828601612929565b925050602083013567ffffffffffffffff811115612be257600080fd5b612bee858286016129bc565b9150509250929050565b60008060408385031215612c0b57600080fd5b6000612c1985828601612929565b9250506020612c2a858286016129e6565b9150509250929050565b600060208284031215612c4657600080fd5b6000612c5484828501612968565b91505092915050565b600060208284031215612c6f57600080fd5b6000612c7d8482850161297d565b91505092915050565b600060208284031215612c9857600080fd5b600082013567ffffffffffffffff811115612cb257600080fd5b612cbe848285016129bc565b91505092915050565b600060208284031215612cd957600080fd5b6000612ce7848285016129e6565b91505092915050565b600060208284031215612d0257600080fd5b6000612d10848285016129fb565b91505092915050565b612d228161360c565b82525050565b612d31816135fa565b82525050565b612d408161361e565b82525050565b6000612d51826134fc565b612d5b8185613512565b9350612d6b81856020860161368f565b612d748161385b565b840191505092915050565b6000612d8a82613507565b612d948185613523565b9350612da481856020860161368f565b612dad8161385b565b840191505092915050565b6000612dc382613507565b612dcd8185613534565b9350612ddd81856020860161368f565b80840191505092915050565b6000612df6602b83613523565b9150612e018261386c565b604082019050919050565b6000612e19603283613523565b9150612e24826138bb565b604082019050919050565b6000612e3c602683613523565b9150612e478261390a565b604082019050919050565b6000612e5f602583613523565b9150612e6a82613959565b604082019050919050565b6000612e82601c83613523565b9150612e8d826139a8565b602082019050919050565b6000612ea5602483613523565b9150612eb0826139d1565b604082019050919050565b6000612ec8601983613523565b9150612ed382613a20565b602082019050919050565b6000612eeb602c83613523565b9150612ef682613a49565b604082019050919050565b6000612f0e603883613523565b9150612f1982613a98565b604082019050919050565b6000612f31602a83613523565b9150612f3c82613ae7565b604082019050919050565b6000612f54602983613523565b9150612f5f82613b36565b604082019050919050565b6000612f77602e83613523565b9150612f8282613b85565b604082019050919050565b6000612f9a602083613523565b9150612fa582613bd4565b602082019050919050565b6000612fbd603183613523565b9150612fc882613bfd565b604082019050919050565b6000612fe0602c83613523565b9150612feb82613c4c565b604082019050919050565b6000613003602083613523565b915061300e82613c9b565b602082019050919050565b6000613026602f83613523565b915061303182613cc4565b604082019050919050565b6000613049602183613523565b915061305482613d13565b604082019050919050565b600061306c603183613523565b915061307782613d62565b604082019050919050565b600061308f601283613523565b915061309a82613db1565b602082019050919050565b60006130b2602c83613523565b91506130bd82613dda565b604082019050919050565b6130d181613676565b82525050565b60006130e38285612db8565b91506130ef8284612db8565b91508190509392505050565b60006020820190506131106000830184612d28565b92915050565b600060208201905061312b6000830184612d19565b92915050565b60006080820190506131466000830187612d28565b6131536020830186612d28565b61316060408301856130c8565b81810360608301526131728184612d46565b905095945050505050565b60006020820190506131926000830184612d37565b92915050565b600060208201905081810360008301526131b28184612d7f565b905092915050565b600060208201905081810360008301526131d381612de9565b9050919050565b600060208201905081810360008301526131f381612e0c565b9050919050565b6000602082019050818103600083015261321381612e2f565b9050919050565b6000602082019050818103600083015261323381612e52565b9050919050565b6000602082019050818103600083015261325381612e75565b9050919050565b6000602082019050818103600083015261327381612e98565b9050919050565b6000602082019050818103600083015261329381612ebb565b9050919050565b600060208201905081810360008301526132b381612ede565b9050919050565b600060208201905081810360008301526132d381612f01565b9050919050565b600060208201905081810360008301526132f381612f24565b9050919050565b6000602082019050818103600083015261331381612f47565b9050919050565b6000602082019050818103600083015261333381612f6a565b9050919050565b6000602082019050818103600083015261335381612f8d565b9050919050565b6000602082019050818103600083015261337381612fb0565b9050919050565b6000602082019050818103600083015261339381612fd3565b9050919050565b600060208201905081810360008301526133b381612ff6565b9050919050565b600060208201905081810360008301526133d381613019565b9050919050565b600060208201905081810360008301526133f38161303c565b9050919050565b600060208201905081810360008301526134138161305f565b9050919050565b6000602082019050818103600083015261343381613082565b9050919050565b60006020820190508181036000830152613453816130a5565b9050919050565b600060208201905061346f60008301846130c8565b92915050565b600061347f613490565b905061348b82826136f4565b919050565b6000604051905090565b600067ffffffffffffffff8211156134b5576134b461382c565b5b6134be8261385b565b9050602081019050919050565b600067ffffffffffffffff8211156134e6576134e561382c565b5b6134ef8261385b565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061354a82613676565b915061355583613676565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561358a5761358961379f565b5b828201905092915050565b60006135a082613676565b91506135ab83613676565b9250826135bb576135ba6137ce565b5b828204905092915050565b60006135d182613676565b91506135dc83613676565b9250828210156135ef576135ee61379f565b5b828203905092915050565b600061360582613656565b9050919050565b600061361782613656565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156136ad578082015181840152602081019050613692565b838111156136bc576000848401525b50505050565b600060028204905060018216806136da57607f821691505b602082108114156136ee576136ed6137fd565b5b50919050565b6136fd8261385b565b810181811067ffffffffffffffff8211171561371c5761371b61382c565b5b80604052505050565b600061373082613676565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156137635761376261379f565b5b600182019050919050565b600061377982613676565b915061378483613676565b925082613794576137936137ce565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4d617820737570706c7920726561636865640000000000000000000000000000600082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b613e32816135fa565b8114613e3d57600080fd5b50565b613e498161360c565b8114613e5457600080fd5b50565b613e608161361e565b8114613e6b57600080fd5b50565b613e778161362a565b8114613e8257600080fd5b50565b613e8e81613676565b8114613e9957600080fd5b5056fea26469706673582212202b8046dfe529db8b362490ee23a015715ca0bec04bc5446dcf6d51c068beb10d64736f6c63430008040033\",\r\n  \"linkReferences\": {},\r\n  \"deployedLinkReferences\": {}\r\n}","import { create as ipfsHttpClient } from \"ipfs-http-client\";\r\nimport axios from \"axios\";\r\nimport { nftAddress, marketAddress } from \"../contracts\";\r\n\r\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\r\n\r\n// helper function for minting the NFTs\r\nexport const createNft = async (\r\n    minterContract,\r\n    marketContract,\r\n    price,\r\n    { name, description, exteralUrl, ipfsImage, ownerAddress}\r\n  ) => {\r\n    await (async () => {\r\n      // require that NFT has a name, description and an image\r\n      if (!name || !description || !ipfsImage) return;\r\n\r\n      // convert NFT metadata to JSON format\r\n      const data = JSON.stringify({\r\n        name,\r\n        description,\r\n        exteralUrl,\r\n        image: ipfsImage,\r\n        owner: ownerAddress\r\n      });\r\n  \r\n      try {\r\n        // save NFT metadata to IPFS\r\n        const added = await client.add(data);\r\n  \r\n        // IPFS url for uploaded metadata\r\n        const url = `https://ipfs.infura.io/ipfs/${added.path}`;\r\n\r\n        const owner2 = await fetchNftOwner(marketContract);\r\n\r\n        console.log(owner2)\r\n        console.log(ownerAddress)\r\n\r\n        await marketContract.listItem(nftAddress, 1, 1);\r\n\r\n        // mint the NFT and save the IPFS url to the blockchain\r\n        await minterContract.safeMint(ownerAddress, url);\r\n        \r\n        const all_nfts = await getNfts(minterContract);\r\n\r\n        // filter NFTs for user and find the last one minted in order to list on market\r\n        let lastNftMinted = all_nfts.filter(e => e.owner.toLowerCase() === ownerAddress.toLowerCase());\r\n\r\n        lastNftMinted = lastNftMinted[lastNftMinted.length - 1];\r\n\r\n        let tokenId = lastNftMinted.index;\r\n\r\n        console.log(tokenId)\r\n\r\n        // calls function that lists the minted NFT in the marketplace\r\n        await createMarketItem(minterContract, marketContract, price, tokenId);\r\n  \r\n      } catch (error) {\r\n        console.log(\"Error listing NFT: \", error);\r\n      }\r\n    })();\r\n};\r\n\r\n\r\n// uploads image metadata to IPFS (file system storage)\r\nexport const uploadToIpfs = async (e) => {\r\n  const file = e.target.files[0];\r\n  if (!file) return;\r\n  try {\r\n    const added = await client.add(file, {\r\n      progress: (prog) => console.log(`received: ${prog}`),\r\n    });\r\n    return `https://ipfs.infura.io/ipfs/${added.path}`;\r\n  } catch (error) {\r\n    console.log(\"Error uploading file: \", error);\r\n  }\r\n};\r\n\r\n// function to get NFTs from the NFT contract\r\nexport const getNfts = async (minterContract) => {\r\n  try {\r\n    const nfts = [];\r\n    // gets total amount of NFTs in the contract\r\n    const nftsLength = await minterContract.totalSupply();\r\n    // loop through all NFTs\r\n    for (let i = 0; i < Number(nftsLength); i++) {\r\n      const nft = new Promise(async (resolve) => {\r\n        // get NFT token URI to retrieve NFT metadata\r\n        const res = await minterContract.tokenURI(i);\r\n        const meta = await fetchNftMeta(res);\r\n        const owner = await fetchNftOwner(minterContract, i);\r\n        resolve({\r\n          index: i,\r\n          owner: owner,\r\n          name: meta.data.name,\r\n          image: meta.data.image,\r\n          description: meta.data.description\r\n        });\r\n      });\r\n      nfts.push(nft);\r\n    }\r\n    return Promise.all(nfts);\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// gets NFT metadata from IPFS\r\nexport const fetchNftMeta = async (ipfsUrl) => {\r\n  try {\r\n    if (!ipfsUrl) return null;\r\n    const meta = await axios.get(ipfsUrl);\r\n    return meta;\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// gets NFT owner from NFT contract\r\nexport const fetchNftOwner = async (minterContract, index) => {\r\n  try {\r\n    return await minterContract.ownerOf(index);\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// get NFT contract owner\r\nexport const fetchNftContractOwner = async (minterContract) => {\r\n  try {\r\n    let owner = await minterContract.owner();\r\n    return owner;\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// List NFT in the marketplace\r\nexport const createMarketItem = async (minterContract, marketContract, price, tokenId) => {\r\n  try {\r\n    console.log(price);\r\n    console.log(tokenId);\r\n    // allows marketplace to trade the user NFTs\r\n    await minterContract.setApprovalForAll(marketAddress, true);\r\n    // creates the NFT item in the marketplace contract\r\n    let owner = await marketContract.listItem(nftAddress, tokenId, 1);\r\n    return owner;\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n  ","import { Contract } from '@ethersproject/contracts';\r\n\r\n\r\nexport const getContract = (library, account, contractAddress, contractAbi) => {\r\n\tconst signer = library.getSigner(account).connectUnchecked();\r\n\tvar contract = new Contract(contractAddress, contractAbi, signer);\r\n\treturn contract;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { NotificationSuccess,  NotificationError} from \"../ui/Notifications\";\r\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\r\nimport { uploadToIpfs } from \"../../utils/minter\";\r\nimport { createNft } from \"../../utils/minter\";\r\nimport { ethers } from \"ethers\";\r\n\r\nimport { getContract } from '../../hooks/useContract';\r\nimport { nftAbi, nftAddress, marketAbi, marketAddress } from \"../../contracts\";\r\n\r\n\r\nconst AddNfts = () => {\r\n  // state for the form data\r\n  const [description, setDescription] = useState(\"\");\r\n  const [exteralUrl, setExteralUrl] = useState(\"\");\r\n  const [ipfsImage, setIpfsImage] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [show, setShow] = useState(false);\r\n  const [price, setPrice] = useState(0);\r\n\r\n  // allows to redirect user after a function is called\r\n  const navigate = useNavigate();\r\n\r\n  //connector, library, chainId, account, activate, deactivate\r\n\tconst web3reactContext = useWeb3React();\r\n\r\n  // check if all form data has been filled\r\n  const isFormFilled = () =>\r\n  name && ipfsImage && description && price;\r\n  \r\n  // close the popup modal\r\n  const handleClose = () => {\r\n    setShow(false);\r\n  };\r\n  \r\n  // calls function minter from utils folder to mint the NFT and list it on the market\r\n  const addNft = async (data) => {\r\n    try {\r\n      if (!web3reactContext.account) {\r\n        alert(\"Please connect wallet.\");\r\n      }\r\n      if (!price) {\r\n        alert(\"Your NFT must have a price.\");\r\n      }\r\n      // contract abstractions\r\n      const minterContract = \r\n        getContract(web3reactContext.library, web3reactContext.account, nftAddress, nftAbi['abi']);\r\n      const marketContract = \r\n        getContract(web3reactContext.library, web3reactContext.account, marketAddress, marketAbi['abi']);\r\n      // mint the NFT and list it on the marketplace\r\n      await createNft(minterContract, marketContract, price, data);\r\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n      // redirect user to profile page\r\n      navigate(`/profile`)\r\n      } catch (error) {\r\n        console.log({ error });\r\n        toast(<NotificationError text=\"Failed to create an NFT.\" />);\r\n      }\r\n    };\r\n\r\n  // parses the price into Ether format from form input\r\n  const getPrice = (e) => {\r\n    try {\r\n      const listingPrice = ethers.utils.parseEther(e.toString())\r\n      setPrice(listingPrice);\r\n    } catch (error) {\r\n      console.log({ error })\r\n      toast(<NotificationError text=\"Price must be a Number.\" />);\r\n    }\r\n  }\r\n\r\n  // display the popup modal\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={handleShow}\r\n        variant=\"outline-dark\"\r\n        className=\"rounded-pill px-5 m-2\"\r\n      >\r\n        Create NFT\r\n      </Button>\r\n\r\n      {/* Modal */}\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Create NFT</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          <Form onSubmit={(e) => e.preventDefault()}>\r\n            <FloatingLabel\r\n              controlId=\"inputLocation\"\r\n              label=\"Name\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Name of NFT\"\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <FloatingLabel\r\n              controlId=\"inputDescription\"\r\n              label=\"Description\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"description\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  setDescription(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <FloatingLabel\r\n              controlId=\"InputExternalUrl\"\r\n              label=\"ExternalUrl\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"external url to your NFT (optional)\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  setExteralUrl(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <Form.Control\r\n              type=\"file\"\r\n              className={\"mb-3\"}\r\n              onChange={async (e) => {\r\n                const imageUrl = await uploadToIpfs(e);\r\n                if (!imageUrl) {\r\n                  alert(\"failed to upload image\");\r\n                  return;\r\n                }\r\n                setIpfsImage(imageUrl);\r\n              }}\r\n              placeholder=\"Product name\"\r\n            ></Form.Control>\r\n\r\n          <FloatingLabel\r\n              controlId=\"InputPrice\"\r\n              label=\"Price\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"Listing Price for your NFT\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  getPrice(e.target.value);\r\n                }}\r\n              />\r\n              <select>\r\n                  <option value=\"MATIC\">MATIC</option>\r\n              </select>\r\n            </FloatingLabel>\r\n          </Form>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"dark\"\r\n            disabled={!isFormFilled()}\r\n            onClick={() => {\r\n              addNft({\r\n                name,\r\n                description,\r\n                exteralUrl,\r\n                ipfsImage,\r\n                ownerAddress: web3reactContext.account\r\n              });\r\n              handleClose();\r\n            }}\r\n          >\r\n            Create NFT\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddNfts;\r\n","import { InjectedConnector } from '@web3-react/injected-connector';\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\r\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\r\nrequire('dotenv').config({path: '.env'});\r\n\r\n\r\nconst RPC_URLS = {\r\n\t1: `https://mainnet.infura.io/v3/${process.env.INFURA_ID}`,\r\n\t3: `https://ropsten.infura.io/v3/${process.env.INFURA_ID}`,\r\n\t4: `https://rinkeby.infura.io/v3/${process.env.INFURA_ID}`,\r\n\t5: `https://goerli.infura.io/v3/${process.env.INFURA_ID}`,\r\n\t42: `https://kovan.infura.io/v3/${process.env.INFURA_ID}`,\r\n\t137: `https://polygon-mainnet.infura.io/v3/${process.env.INFURA_ID}`,\r\n\t80001: process.env.ALCHEMY_URL\r\n};\r\n\r\n/*\r\n* 1 - ethereum mainnet\r\n* 3 - ropsten\r\n* 4 - rinkeby\r\n* 5 - goerli\r\n* 42 - kovan\r\n* 137 - polygon mainnet\r\n* 80001 - mumbai (polygon testnet)\r\n*/\r\n\r\n//metamask\r\nexport const injected = new InjectedConnector({\r\n\tsupportedChainIds: [ 1, 3, 4, 5, 42, 137, 80001 ]\r\n});\r\n\r\n\r\nexport const walletconnect = new WalletConnectConnector({\r\n\trpc: {\r\n\t\t1: RPC_URLS[1],\r\n\t\t4: RPC_URLS[4]\r\n\t},\r\n\tqrcode: true,\r\n\tpollingInterval: 15000\r\n});\r\n\r\n\r\nexport function resetWalletConnector(connector) {\r\n\tif (connector && connector instanceof WalletConnectConnector) {\r\n\t\tconnector.walletConnectProvider = undefined;\r\n\t}\r\n}\r\n\r\n//coinbase\r\nexport const walletlink = new WalletLinkConnector({\r\n\turl: RPC_URLS[4],\r\n\tappName: 'demo-app',\r\n\tsupportedChainIds: [ 1, 3, 4, 5, 42, 137, 80001 ]\r\n});\r\n","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport Create  from \"../create/Create\";\r\nimport './Navigation.css'\r\nimport { useWeb3React } from \"@web3-react/core\"\r\nimport { injected } from '../../hooks/connectors';\r\n\r\n\r\n const Navigation = () => {\r\n\r\n  //connector, library, chainId, account, activate, deactivate\r\n\tconst web3reactContext = useWeb3React();\r\n\r\n  const disconnect = () => {\r\n\t\ttry {\r\n\t\t\tweb3reactContext.deactivate();\r\n\t\t} catch (ex) {\r\n\t\t\tconsole.log(ex);\r\n\t\t}\r\n\t};\r\n\r\n  //web3react metamask\r\n\tconst connect = async () => {\r\n\t\ttry {\r\n\t\t\tawait web3reactContext.activate(injected);\r\n\t\t} catch (ex) {\r\n\t\t\tconsole.log(ex);\r\n\t\t}\r\n\t};\r\n\r\n   \r\n  return (\r\n      <>\r\n\r\n      <nav className=\"navbar-main p-2 border-b-2\">\r\n          <h1 className='py-4 px-4 font-bold text-3xl'>VMS Marketplace</h1>\r\n          <div className='div-links'>\r\n              <Link to=\"/explore\" className=\"navbar-links rounded-pill py-3 m-1\">\r\n                  Explore\r\n              </Link>\r\n\r\n              <Link to=\"/profile\" className=\"navbar-links rounded-pill py-3 m-1\">\r\n                  My NFTs\r\n              </Link>\r\n\r\n              <Create />\r\n\r\n              {!web3reactContext.account ? (\r\n                  <>\r\n                      <Button type='button' onClick={connect} variant=\"outline-dark\" className=\"navbar-btn rounded-pill px-5 m-1\">Connect Wallet</Button>\r\n                  </>\r\n              ): (\r\n                  <>\r\n                      <Button type='button' onClick={disconnect} variant=\"outline-dark\" className=\"navbar-btn rounded-pill px-5 m-1\">LOGOUT</Button>\r\n                  </>\r\n              )}\r\n          </div>\r\n      </nav>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default Navigation\r\n","import {ERC20_DECIMALS} from \"./constants\";\r\n\r\n// format a wallet address\r\nexport const truncateAddress = (address) => {\r\n    if (!address) return\r\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\r\n}\r\n\r\n// convert from big number\r\nexport const formatBigNumber = (num) => {\r\n    if (!num) return\r\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\r\n}","import { useEffect, useRef } from \"react\";\r\nimport Jazzicon from \"@metamask/jazzicon\";\r\n\r\nexport default function Identicon({ address, size, ...rest }) {\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    if (address && ref.current) {\r\n      ref.current.innerHTML = \"\";\r\n      ref.current.appendChild(\r\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\r\n      );\r\n    }\r\n  }, [address, size]);\r\n\r\n  return (\r\n    <div {...rest}>\r\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, Col, Badge, Stack, Button, Modal, Form, FloatingLabel  } from \"react-bootstrap\";\r\nimport { truncateAddress } from \"../../utils\";\r\nimport Identicon from \"../ui/Identicon\";\r\nimport { toast } from \"react-toastify\";\r\nimport { NotificationSuccess,  NotificationError} from \"../ui/Notifications\";\r\nimport { useWeb3React } from \"@web3-react/core\"\r\nimport { ethers } from \"ethers\";\r\n\r\nimport { getContract } from '../../hooks/useContract';\r\nimport { marketAbi, marketAddress } from \"../../contracts\";\r\n\r\nconst NftCard = ({ nft }) => {\r\n  \r\n  //connector, library, chainId, account, activate, deactivate\r\n  const web3reactContext = useWeb3React();\r\n\r\n  const navigate = useNavigate()\r\n\r\n  // handles the state of the modal\r\n  const [show, setShow] = useState(false);\r\n\r\n  // sets price for relisting acording to user input from change price Button\r\n  const [price, setPrice] = useState(0);\r\n  // create marketplace contract abstraction\r\n  const marketContract = getContract(web3reactContext.library, web3reactContext.account, marketAddress, marketAbi['abi']);\r\n\r\n  // check if all form data has been filled\r\n  const isFormFilled = () =>\r\n  nft && price;\r\n\r\n  // close the popup modal\r\n  const handleClose = () => {\r\n    setShow(false);\r\n  };\r\n\r\n  // function for updating NFT price\r\n  const relistNft = async () => {\r\n    try {\r\n        await (async () => {\r\n          /* user will be prompted to pay the asking process to complete the transaction */\r\n          console.log(price)\r\n          // calls relist function from marketplace contract, passing NFT item id, id that keeps track of each market item \r\n          // (not tokenId, which tracks the id in the NFT contract)\r\n          const relistItem = await marketContract.methods.relistItem(nft.itemId, price).send({ from: web3reactContext.account });\r\n          if (!relistItem) alert(\"Failed to Re-List NFT.\" );\r\n          toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n          // react component that redirects user to the explore page\r\n          navigate(`/explore`)\r\n        })\r\n      } catch (error) {\r\n        console.log({ error });\r\n        alert(\"Failed to Re-List NFT.\" )\r\n        toast(<NotificationError text=\"Failed to Re-List NFT.\" />);\r\n      }\r\n    };\r\n\r\n  // function for buying listed NFTs\r\n  const buyNft = async () => {\r\n    try {\r\n        // itemId (id that keeps track of each market item)\r\n        const id = parseInt(nft.itemId)\r\n\r\n        await (async (kit) => {\r\n          // user wallet address\r\n          const { defaultAccount } = kit;\r\n          // market fee charged for buying NFT, determined when deploying the marketplace contract\r\n          const marketFee = 1;\r\n          // calculation of total price, nft price + fee percentage\r\n          const nftMarketPrice = (nft.price*(100 + marketFee))/100;\r\n          // parse total price to ether\r\n          const _totalPrice =( ethers.utils.parseUnits(nftMarketPrice.toString(), 'ether')).toString();\r\n          console.log(_totalPrice)\r\n          // call function from marketContract specifying the exact price of the NFT,\r\n          // if the price is incorrect wallet will say not able to estimate gas.\r\n          await marketContract.methods.purchaseItem(id).send({ from: defaultAccount, value: _totalPrice });\r\n\r\n          alert(`You have successfully purchased this NFT!`)\r\n          // redirects user to profile page\r\n          navigate(`/profile`)\r\n        })\r\n        // updates remove property of nft to true, so the button for buying is updated to Change price (for relisting)\r\n        nft.remove = true\r\n      } catch (error) {\r\n        console.log({ error });\r\n        alert(\"Failed to Buy NFT.\" )\r\n        toast(<NotificationError text=\"Failed to Buy NFT.\" />);\r\n      }\r\n    };\r\n\r\n\r\n  // gets the price from the form and updates to Ether\r\n  const getPrice = (e) => {\r\n    try {\r\n      // change price to ether so unit is correct\r\n      const priceFormatted = ethers.utils.parseEther(e.toString())\r\n      // updates price state\r\n      setPrice(priceFormatted);\r\n    } catch (error) {\r\n      console.log({ error })\r\n      toast(<NotificationError text=\"Price must be a Number.\" />);\r\n    }\r\n  }\r\n\r\n  // display the popup modal\r\n  const handleShow = () => setShow(true);\r\n\r\n\r\n  return (\r\n    <Col xs={5} sm={3} lg={3} xl={2} key={nft.tokenId} className=\"p-1 m-5\">\r\n      <Card className=\"h-100\">\r\n        <Card.Header>\r\n          <Stack direction=\"horizontal\" className=\"w-5\" gap={3}>\r\n            <Identicon address={nft.seller} size={22} />\r\n            <span className=\"font-monospace text-secondary\">\r\n              {truncateAddress(nft.seller)}\r\n            </span>\r\n            <Badge bg=\"secondary\" className=\"ms-auto\">\r\n              {nft.tokenId} ID\r\n            </Badge>\r\n          </Stack>\r\n        </Card.Header>\r\n\r\n        <div className=\" ratio ratio-4x3\">\r\n          <img src={nft.image} alt={nft.description} />\r\n        </div>\r\n\r\n        <Card.Body className=\"d-flex  flex-column text-center\">\r\n          <Card.Title>{nft.name}</Card.Title>\r\n          <Card.Text className=\"flex-grow-1\">{nft.description}</Card.Text>\r\n          <Card.Text className=\"flex-grow-1\">{`${nft.price} USD`}</Card.Text>\r\n          <Card.Text className=\"flex-grow-1\">{nft.exteralUrl}</Card.Text>\r\n        </Card.Body>\r\n        <Card.Footer className=\"d-flex  flex-row justify-content-center text-center\">\r\n          {/*renders buttons conditionally depending on whether or not user is the NFT owner */}\r\n          {!nft.relist && <Button variant=\"outline-dark\" className=\"rounded-pill px-4 mx-2 card-btn\" onClick={buyNft}>Buy</Button>}\r\n          {nft.relist && (\r\n            <>\r\n            <Button\r\n              onClick={handleShow}\r\n              variant=\"dark\"\r\n              className=\"rounded-pill px-4 card-btn\"\r\n            >\r\n              Change price\r\n            </Button>\r\n      \r\n            {/* Modal */}\r\n            <Modal show={show} onHide={handleClose} centered>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Re-List NFT</Modal.Title>\r\n              </Modal.Header>\r\n      \r\n              <Modal.Body>\r\n                  <Form>\r\n                      <FloatingLabel\r\n                          controlId=\"InputPrice\"\r\n                          label=\"Price\"\r\n                          className=\"mb-3\"\r\n                          >\r\n                      <Form.Control\r\n                          as=\"textarea\"\r\n                          placeholder=\"Listing Price for your NFT\"\r\n                          style={{ height: \"80px\" }}\r\n                          onChange={(e) => {\r\n                          getPrice(e.target.value);\r\n                          }}\r\n                      />\r\n                      <select>\r\n                          <option value=\"CELO\">CELO</option>\r\n                      </select>\r\n                      </FloatingLabel>\r\n                  </Form>\r\n              </Modal.Body>\r\n      \r\n              <Modal.Footer>\r\n                <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n                  Close\r\n                </Button>\r\n                <Button\r\n                  variant=\"dark\"\r\n                  disabled={!isFormFilled()}\r\n                  onClick={() => {\r\n                    relistNft();\r\n                    handleClose();\r\n                  }}\r\n                >\r\n                  Re-List NFT\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </>\r\n          )}\r\n        </Card.Footer>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n\r\nNftCard.propTypes = {\r\n  // props passed into this component\r\n  nft: PropTypes.instanceOf(Object).isRequired,\r\n};\r\n\r\nexport default NftCard;\r\n","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst Loader = () => (\r\n  <div className=\"d-flex justify-content-center\">\r\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\r\n      <span className=\"visually-hidden\">Loading...</span>\r\n    </Spinner>\r\n  </div>\r\n);\r\nexport default Loader;\r\n","import { useEffect, useState, useCallback, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Nft from \"../nfts/Card\";\r\nimport Loader from \"../ui/Loader\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport {ethers} from \"ethers\";\r\nimport { useWeb3React } from \"@web3-react/core\"\r\nimport { RingLoader } from \"react-spinners\";\r\nimport './Explore.css';\r\n\r\n\r\nimport { getContract } from '../../hooks/useContract';\r\nimport { nftAbi, nftAddress, marketAbi, marketAddress } from \"../../contracts\";\r\n\r\n\r\nconst Explore = () => {\r\n    // to keep track of all NFTs to map over later\r\n    const [nfts, setNfts] = useState([]);\r\n    // check if NFTs are loaded or not\r\n    const [loading, setLoading] = useState(false);\r\n    // create marketplace contract abstraction\r\n    const marketContract = useRef();\r\n    // create NFT contract abstraction\r\n    const minterContract = useRef();\r\n\r\n     //connector, library, chainId, account, activate, deactivate\r\n     const web3reactContext = useWeb3React();\r\n\r\n    const getAssets = useCallback(async () => {\r\n        try {\r\n            // sets loading to true so it displays react animation while NFTs load\r\n            setLoading(true);\r\n            // calls fetchMarketItems from marketplace contract to get info from all the items\r\n            const data = await marketContract.getListing();\r\n            // map through all items\r\n            const items = await Promise.all(data.map(async marketItem => {\r\n                // gets the tokenId for each market item\r\n                const tokenId = Number(marketItem.tokenId);\r\n                // gets tokenURI for each market item\r\n                const tokenURI = await minterContract.methods.tokenURI(tokenId).call();\r\n                // get the address of NFT owner (used to filter out NFTs that are not owned by user)\r\n                const seller = marketItem.seller;\r\n                // get NFT metadata\r\n                const meta = await axios.get(tokenURI);\r\n                // get price and convert unit to ether\r\n                let price = ethers.utils.formatUnits(marketItem.price, 'ether');\r\n\r\n                // return an object with all item info needed for other functions\r\n                return {\r\n                    image: meta.data.image,\r\n                    description: meta.data.description,\r\n                    externalUrl: meta.data.externalUrl,\r\n                    seller: seller,\r\n                    name: meta.data.name,\r\n                    price: price,\r\n                    tokenURI: tokenURI,\r\n                    tokenId: tokenId,\r\n                    itemId: marketItem.itemId,\r\n                }\r\n            }))\r\n            if (!items) return;\r\n            \r\n            await items.map(nft => {\r\n              nft['remove'] = true\r\n              console.log(nft)\r\n              // add remove property for allowing to display buttons conditionally later\r\n              return web3reactContext.account.toLowerCase() === nft.seller.toLowerCase() ? nft['relist'] = true : nft['relist'] = false\r\n            })\r\n            // set NFTs list to items\r\n            setNfts(items);               \r\n            \r\n        } catch (error) {\r\n          console.log({ error });\r\n        } finally {\r\n          // set loading to false so it stops react animation\r\n          setLoading(false);\r\n        }\r\n      }, [minterContract, marketContract, web3reactContext.account]);\r\n\r\n      useEffect(() => {\r\n        try {\r\n          if (!web3reactContext.account) return (\r\n            <div className=\"nonfts-div\">\r\n                {<RingLoader color={\"green\"} size={150} />}\r\n                <span className=\"nonfts-text\">No NFTs yet <br /> Create one to display</span>\r\n            </div>\r\n        );\r\n          // create marketplace contract abstraction\r\n          marketContract.current = getContract(web3reactContext.library, web3reactContext.account, marketAddress, marketAbi['abi']);\r\n          // create NFT contract abstraction\r\n          minterContract.current = getContract(web3reactContext.library, web3reactContext.account, nftAddress, nftAbi['abi']);\r\n          if (marketContract) {\r\n            // gets all market Items when the page loads\r\n            getAssets();\r\n          }\r\n        } catch (error) {\r\n          console.log({ error });\r\n        }\r\n      }, [web3reactContext, getAssets]);\r\n\r\n    return (\r\n        <>\r\n        {!loading ? (\r\n            <div className=\"explore-section\">\r\n              {nfts.length >= 1 ? (\r\n              <Row xs={1} sm={1} lg={1} className=\"w-100\">\r\n                  {nfts.map((_nft) => (\r\n                      <Nft\r\n                          key={_nft.tokenId}\r\n                          nft={{\r\n                          ..._nft,\r\n                          }}\r\n                      />\r\n                  ))}\r\n              </Row>\r\n              ) : (\r\n                  <div className=\"nonfts-div\">\r\n                      {<RingLoader color={\"green\"} size={150} />}\r\n                      <span className=\"nonfts-text\">No NFTs yet <br /> Create one to display</span>\r\n                  </div>\r\n              )\r\n              }\r\n            </div>\r\n        ) : (\r\n            <Loader />\r\n        )}\r\n        </>\r\n    );\r\n    };\r\n    \r\n\r\nExplore.propTypes = {\r\n    minterContract: PropTypes.instanceOf(Object)\r\n };\r\n    \r\nExplore.defaultProps = {\r\nminterContract: null,\r\n};\r\n\r\nexport default Explore;\r\n","import { useEffect, useState, useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Nft from \"../nfts/Card\";\r\nimport Loader from \"../ui/Loader\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { useWeb3React } from \"@web3-react/core\"\r\nimport { RingLoader } from \"react-spinners\";\r\nimport '../explore/Explore.css';\r\nimport { getNfts } from '../../utils/minter'\r\n\r\nimport { getContract } from '../../hooks/useContract';\r\nimport { nftAbi, nftAddress } from \"../../contracts\";\r\n\r\n\r\n\r\nconst Profile = () => {\r\n    // to keep track of all NFTs to map over later\r\n    const [nfts, setNfts] = useState([]);\r\n    // check if NFTs are loaded or not\r\n    const [loading, setLoading] = useState(false);\r\n    let minterContract;\r\n\r\n     //connector, library, chainId, account, activate, deactivate\r\n     const web3reactContext = useWeb3React();\r\n\r\n    const getAssets = useCallback(async () => {\r\n      try {\r\n          if (!web3reactContext.account) return;\r\n          // create NFT contract abstraction\r\n          const minterContract = getContract(web3reactContext.library, web3reactContext.account, nftAddress, nftAbi['abi']);\r\n          // sets loading to true so it displays react animation while NFTs load\r\n          setLoading(true);\r\n\r\n          const all_nfts = await getNfts(minterContract);\r\n\r\n          const userNfts = all_nfts.filter(e => e.owner.toLowerCase() === web3reactContext.account.toLowerCase());\r\n          \r\n          if (!userNfts) return;\r\n          // sets nft list to be the filtered items\r\n          setNfts(userNfts);\r\n        } catch (error) {\r\n          console.log({ error });\r\n        } finally {\r\n          // set loading to false so it stops react animation\r\n          setLoading(false);\r\n        }\r\n      }, [web3reactContext.account, web3reactContext.library]);\r\n\r\n      useEffect(() => {\r\n        try {\r\n          // gets all market Items when the page loads\r\n          getAssets();\r\n        } catch (error) {\r\n          console.log({ error });\r\n        }\r\n      }, [getAssets, minterContract]);\r\n\r\n    return (\r\n        <div className=\"explore-section\">\r\n        {!loading ? (\r\n            <>\r\n            {nfts.length >= 1 ? (\r\n            <Row xs={1} sm={1} lg={1} className=\"w-100\">\r\n                {nfts.map((_nft) => (\r\n                    <Nft\r\n                        key={_nft.index}\r\n                        nft={{\r\n                        ..._nft,\r\n                        }}\r\n                    />\r\n                ))}\r\n            </Row>\r\n            ) : (\r\n                <div className=\"nonfts-div\">\r\n                    {<RingLoader color={\"green\"} size={150} />}\r\n                    <span className=\"nonfts-text\">No NFTs yet <br /> Create one to display</span>\r\n                </div>\r\n            )\r\n            }\r\n            </>\r\n        ) : (\r\n            <Loader />\r\n        )}\r\n        </div>\r\n    );\r\n    };\r\n    \r\n\r\nProfile.propTypes = {\r\n    minterContract: PropTypes.instanceOf(Object)\r\n };\r\n    \r\nProfile.defaultProps = {\r\nminterContract: null,\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport {BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport Navigation from './components/navbar/Navigation';\r\nimport Explore from './components/explore/Explore';\r\nimport Profile from './components/profile/Profile';\r\nimport \"./App.css\";\r\n\r\nconst App = function AppWrapper() {\r\n\r\n  return (\r\n    <>\r\n      <BrowserRouter basename=\"/VMS_Marketplace_polygon\">\r\n          <Navigation />\r\n          <Routes>\r\n            <Route path=\"/\" exact element={<Explore  />} />\r\n            <Route path=\"/explore\" element={<Explore />} />\r\n            <Route path=\"/profile\" element={<Profile />} />\r\n          </Routes>\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\nimport { Web3ReactProvider } from '@web3-react/core'\r\nimport { Web3Provider } from \"@ethersproject/providers\";\r\nwindow.onload = function() {\r\n  localStorage.clear();\r\n};\r\n\r\n// const APP_ID = process.env.MORALIS_PUBLIC_APP_ID;\r\n// const SERVER_URL = process.env.MORALIS_PUBLIC_SERVER_URL;\r\n\r\n\r\nfunction getLibrary(provider) {\r\n  const library = new Web3Provider(provider, 'any');\r\n  library.pollingInterval = 15000;\r\n  return library;\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Web3ReactProvider getLibrary={getLibrary}>\r\n      <App />\r\n    </Web3ReactProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}